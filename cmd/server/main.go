package main

import (
	"context"
	"errors"
	"log"
	"net/http"

	"connectrpc.com/connect"
	"github.com/joho/godotenv"

	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	currencies "currencies-exchange/gen/currencies/v1" // generated by protoc-gen-go
	"currencies-exchange/gen/currencies/v1/currenciesconnect"
)

var CurrencieRates = []currencies.CurrencyRate{}

var Currencies = []currencies.Currency{}

var mongo_database *MongoDatabase

var currency_collection *CurrencyCollection
var rates_collection *RatesCollection

type CurrenciesServer struct{}

func (s *CurrenciesServer) Exchange(
	ctx context.Context,
	req *connect.Request[currencies.ExchangeRequest],
) (*connect.Response[currencies.ExchangeResponse], error) {
	log.Println("From: ", req.Msg.From, "\tTo: ", req.Msg.To, "\tAmount: ", req.Msg.Amount)

	var From *currencies.Currency
	var To *currencies.Currency

	for i := 0; i < len(Currencies); i++ {
		if req.Msg.From == Currencies[i].Code {
			From = &Currencies[i]
		}
		if req.Msg.To == Currencies[i].Code {
			To = &Currencies[i]
		}
	}

	var notExistCurrency string = ""
	if To == nil {
		notExistCurrency += req.Msg.To
	}
	if From == nil {
		notExistCurrency += req.Msg.From
	}

	if len(notExistCurrency) > 0 {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("the currency you are requesting does not exist ("+notExistCurrency+")"))
	}

	var rate *currencies.CurrencyRate
	for i := 0; i < len(CurrencieRates); i++ {
		if CurrencieRates[i].Status == currencies.CurrencyRateStatus_CURRENCY_RATE_STATUS_AVAILABLE && CurrencieRates[i].From == From.Code && CurrencieRates[i].To == To.Code {
			rate = &CurrencieRates[i]
		}
	}

	if rate == nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("currency exchange from "+From.Name+" to "+To.Name+" is temporarily unavailable"))
	}

	res := connect.NewResponse(&currencies.ExchangeResponse{
		Result: req.Msg.GetAmount() * rate.Rate,
	})
	res.Header().Set("Currencies-Version", "v1")
	return res, nil
}

func init_currencies() {
	for _, s := range currency_collection.get_all() {
		Currencies = append(Currencies, *get_currency_from_mongo_currency(&s))
	}

	for _, s := range rates_collection.get_all() {
		CurrencieRates = append(CurrencieRates, *get_rate_from_mongo_rate(&s))
	}
}

func main() {
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found")
	}

	mongo_database = new_mongo_database()
	mongo_database.connect()

	currency_collection = new_currency_collection(mongo_database)
	rates_collection = new_rates_collection(mongo_database)

	init_currencies()

	currencies_server := &CurrenciesServer{}
	mux := http.NewServeMux()
	path, handler := currenciesconnect.NewExchangeServiceHandler(currencies_server)
	mux.Handle(path, handler)
	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
